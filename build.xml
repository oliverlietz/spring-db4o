<?xml version="1.0"?>

<!--
  Build file for db4o-spring.

  This script requires a "lib" directory containing the necessary third party JAR files.
  See project.properties for the definitions of the properties used in this file.

  Building db4o-spring requires J2SE 1.4; the "dist" JARs are built with Sun's JDK 1.4.2.
  Note: To successfully run the tests, you need to use Xerces or any other JAXP parser
  that properly supports XML includes. A simple way to achieve this is to put
  xml-apis.jar and xercesImpl.jar into your "JAVA_HOME/jre/lib/ext" directory.
  
  Thanks to the Spring Modules team for the project infrastructure.
-->

<project name="db4o-spring" default="usage" basedir=".">

	<!-- create timestamps -->
	<tstamp/>

	<!-- import component build files
	<import file="builddocs.xml"/>
	-->

	<!-- load project properties -->
	<property file="project.properties"/>
	<property name="etc" value="${basedir}/etc"/>

	<!--
		Set up properties that indicate whether we're building on JDK 1.5.
		Currently simply checks whether the Java version is not 1.3 or 1.4,
		due to the lack of a greater-than comparator in Ant.
	-->

	<condition property="tiger.available">
		<not>
			<or>
				<equals arg1="${ant.java.version}" arg2="1.3"/>
				<equals arg1="${ant.java.version}" arg2="1.4"/>
			</or>
		</not>
	</condition>

	<condition property="tiger.unavailable">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.3"/>
			<equals arg1="${ant.java.version}" arg2="1.4"/>
		</or>
	</condition>

	<!-- classpath for the Commons-Attributes compiler -->
	<path id="attribute-compiler-classpath">
		<fileset dir="${lib.dir}/jakarta-commons">
			<include name="commons-attributes-compiler-2.1.jar"/>
		</fileset>
		<fileset dir="${lib.dir}/jakarta-commons">
			<include name="commons-collections.jar"/>
		</fileset>
		<fileset dir="${lib.dir}/xdoclet">
			<include name="xjavadoc-1.1.jar"/>
		</fileset>
	</path>

	<!-- all libraries for the classpath -->
	<path id="all-libs">

		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>

	</path>

	<target name="usage">

		<echo message=""/>
		<echo message="${name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="build    --> build all; don't create JARs"/>
		<echo message="dist     --> create the JAR file"/>
		<echo message="tests    --> run tests"/>
		<echo message="javadoc  --> build javadoc"/>		
		<echo message=""/>

	</target>

	<target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">

		<delete dir="${target.classes.dir}"/>
		<delete dir="${target.testclasses.dir}"/>
		<delete dir="${target.junit.reports.dir}"/>
		<delete dir="${target.junit.summary.dir}"/>
		<delete dir="${target.release.dir}"/>

		<!-- Just kill target dir (it's safer). No need at this point to keep it. -->
		<delete dir="${target.dir}"/>

		<delete dir="${dist.dir}"/>
		<delete dir="${javadocs.dir}"/>

	</target>


	<!-- Initialize the distribution directory -->
	<target name="initdist" description="Initialize the distribution directory">

		<mkdir dir="${dist.dir}"/>

	</target>

	<!-- Compile main source tree -->
	<target name="build" description="Compile main source tree java files into class files">

		<mkdir dir="${target.classes.dir}"/>

		<javac destdir="${target.classes.dir}" source="1.3" target="1.3" debug="${debug}"
					 deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

		<copy todir="${target.classes.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
			</fileset>
		</copy>

	</target>

	<target name="dist" depends="build,initdist,srczip" description="Create module-specific JAR files">

		<makejar jarfile="${dist.dir}/db4o-spring-${db4o-spring.version}.jar">
			<jar-contents>
				<fileset dir="${target.classes.dir}">
					<include name="org/db4ospring/*"/>
				</fileset>
			</jar-contents>
		</makejar>

	</target>

	<target name="srczip" depends="initdist" description="Create source ZIP (containing Java sources)">

		<delete file="${dist.dir}/db4o-spring-src.zip"/>

		<zip zipfile="${dist.dir}/db4o-spring-src.zip">
			<fileset dir="${src.dir}">
				<include name="org/db4ospring/**"/>
			</fileset>
		</zip>

	</target>


	<target name="javadoc" description="Generate framework Javadocs">

		<mkdir dir="${javadocs.dir}"/>

		<javadoc sourcepath="${src.dir}" destdir="${javadocs.dir}" windowtitle="db4o-Spring support"
						 additionalparam="-breakiterator" source="1.3" access="package" author="true" version="true" use="true"
						 defaultexcludes="true">
			<doctitle><![CDATA[<h1>db4o-spring support</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (C) 2004-2005 The db4o-spring Project.</i>]]></bottom>
			<classpath refid="all-libs"/>
			<packageset dir="${src.dir}">
				<include name="org/db4ospring/**"/>
			</packageset>
		</javadoc>

	</target>

	
	<target name="buildtests" depends="build"
					description="Compile test source tree java files into class files">

		<mkdir dir="${target.testclasses.dir}"/>

		<javac destdir="${target.testclasses.dir}" source="1.3" target="1.3" debug="${debug}"
					 deprecation="false" optimize="false" failonerror="true">
			<!--src path="${commons.attributes.tempdir.test}"/-->
			<src path="${test.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${test.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>

	</target>

	<!--
		Run test suite. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the
		command line, as below:
			ant tests -Dtest.includes=org/springframework/jdbc/**/*Test*
	-->
	<target name="tests" depends="buildtests" description="Run tests">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>

		<mkdir dir="${reports.dir}"/>

		<junit forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes">

			<jvmarg line="-Djava.awt.headless=true"/>

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}"
								 includes="${test.includes}"
								 excludes="${test.excludes}"/>
			</batchtest>
		</junit>

	</target>


<!--
		Run test suite and generate test summary.
		Does not halt on failure or error, in contrast to the "tests" target above.
	-->
	<target name="testsummary" depends="buildtests" description="Run tests and generate test summary">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>
		<property name="summary.dir" value="${target.junit.summary.dir}"/>

		<mkdir dir="${reports.dir}"/>
		<mkdir dir="${summary.dir}"/>

		<junit printsummary="yes" haltonfailure="no" haltonerror="no">

			<jvmarg line="-Djava.awt.headless=true"/>

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>

		</junit>

		<junitreport todir="${reports.dir}">

			<fileset dir="${reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${summary.dir}"/>

		</junitreport>

	</target>

<!--
	<target name="release" depends="alljars,javadoc,doc.all" description="Generate release zip file">

		<mkdir dir="${target.release.dir}"/>

		<delete file="${target.release.dir}/${release.zip}"/>
		<delete file="${target.release.dir}/${release-with-dependencies.zip}"/>

		<fileset id="main" dir=".">
            <exclude name="**/CVS/**/*"/>
			<include name="dist/*.jar"/>
			<include name="dist/*.dtd"/>
			<include name="dist/*.tld"/>
			<include name="dist/*.vm"/>
			<include name="dist/*.ftl"/>
			<include name="docs/**"/>
			<exclude name="docs/reference/images/**"/>
			<exclude name="docs/reference/src/**"/>
			<exclude name="docs/reference/styles/**"/>
			<exclude name="docs/reference/.cvsignore"/>
			<exclude name="docs/reference/readme.txt"/>
			<exclude name="docs/reference/lib/**"/>
			<exclude name="docs/reference/html/**"/>
			<exclude name="docs/reference/pdf/images/**"/>
			<include name="samples/hivemind/**"/>
			<include name="samples/osworkflow/**"/>
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="*.bat"/>
			<include name="*.txt"/>
			<include name="*.xml"/>
			<include name="*.properties"/>
		</fileset>

		<zip zipfile="${target.release.dir}/${release.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
		</zip>

		<zip zipfile="${target.release.dir}/${release-with-dependencies.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
			<zipfileset dir="." prefix="${release.path}">
				<include name="lib/*.txt"/>
				<include name="lib/acegi/**"/>
				<include name="lib/ant/**"/>
				<include name="lib/antlr/**"/>
				<include name="lib/aopalliance/**"/>
				<include name="lib/cglib/**"/>
				<include name="lib/drools/**"/>
				<include name="lib/easymock/**"/>
				<include name="lib/hivemind/**"/>
                <include name="lib/j2ee/**"/>
                <include name="lib/jakarta-commons/**"/>
				<include name="lib/janino/**"/>
				<include name="lib/javassist/**"/>
				<include name="lib/jcs/**"/>
				<include name="lib/jsr94/**"/>
				<include name="lib/junit/**"/>
				<include name="lib/log4j/**"/>
				<include name="lib/opensymphony/**"/>
				<include name="lib/oro/**"/>
				<include name="lib/spring/**"/>
			</zipfileset>
		</zip>

	</target>
	-->
	
	<!--
		cvs update target for the automatic build
	-->
	<target name="cvs-update">
		<cvs command="update -d -P"/>
	</target>

	<macrodef name="makejar">
		<attribute name="jarfile"/>
		<element name="jar-contents"/>
		<sequential>
			<delete file="@{jarfile}"/>
			<jar jarfile="@{jarfile}">
				<jar-contents/>
				<manifest>
					<attribute name="Implementation-Title" value="${db4o-spring.title}"/>
					<attribute name="Implementation-Version" value="${db4o-spring.version}"/>
					<attribute name="Db4o-Spring-Version" value="${db4o-spring.version}"/>
				</manifest>
			</jar>
		</sequential>
	</macrodef>


</project>