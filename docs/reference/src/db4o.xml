<?xml version="1.0" encoding="UTF-8"?>
<chapter id="db4o">
  <title>db4o</title>

  <sect1>
    <title>Introduction</title>

    <para>db4o module facilitates integration between Spring framework and
    <ulink url="http://www.db4o.com/about/productinformation/">db4o</ulink>,
    allowing easier resource management, DAO implementation support and
    transaction strategies. In many respects, this modules is similar in
    structure, naming and functionality to Spring core modules for Hibernate,
    JPA or JDO - users familiar with Spring data access packages should feel
    right at home when using db4o spring integration.</para>

    <para>As samples, a web application named <emphasis>Recipe
    Manager</emphasis> and some examples 'converted' from db4o distribution
    (mainly chapter 1) are available.</para>
  </sect1>

  <sect1>
    <title>Configuration</title>

    <para>Before being used, db4o has to be configured. db4o module makes it
    easy to externalize db4o configuration (be it client or server) from the
    application into Spring application context xml files, reducing the code
    base and allowing decoupling of application from the environment it runs
    in. The core class for creating db4o's <literal>ObjectContainer</literal>
    is the <literal>ObjectContainerFactoryBean</literal> . Based on the
    various parameter passed to it, the objectcontainer can be created from a
    db4o database file, from an <literal>ObjectServer</literal> or based on a
    <literal>Configuration</literal> object.</para>

    <sect2>
      <title>Configuring an ObjectContainer</title>

      <para>The FactoryBean will create <literal>ObjectContainer</literal>s
      based on its properties, using the algorithm below:</para>

      <orderedlist>
        <listitem>
          <para>if the databaseFile is set, a local file based client will be
          created</para>
        </listitem>

        <listitem>
          <para>if memoryFile is set, a local memory based client will be
          instantiated</para>
        </listitem>

        <listitem>
          <para>if a server property is set, a client
          <literal>ObjectContainer</literal> will be created within the VM
          using the given server object</para>
        </listitem>

        <listitem>
          <para>if all the above fail, a connection to a (possibly) remote
          machine will be opened using the hostName, port, user and password
          properties.</para>
        </listitem>
      </orderedlist>

      <para>For example in order to create a memory based file
      <literal>ObjectContainer</literal> , the following configuration can be
      used: <programlisting>&lt;bean id="memoryContainer" class="org.db4ospring.ObjectContainerFactoryBean"&gt;
 &lt;property name="memoryFile"&gt; 
     &lt;bean class="com.db4o.ext.MemoryFile"/&gt;
 &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>For an <literal>ObjectContainer</literal> connected to a (remote)
      server:</para>

      <programlisting>&lt;bean id="remoteServerContainer" class="org.db4ospring.ObjectContainerFactoryBean"&gt;
 &lt;property name="hostName" value="localhost"/&gt;
 &lt;property name="port" value="123"/&gt; 
 &lt;property name="user" value="foo"/&gt; 
 &lt;property name="password" value="bar"/&gt;
&lt;/bean&gt;</programlisting>

      <para>While creating a database file based, local
      <literal>ObjectContainer</literal> can be achieved using a bean
      definition such as:</para>

      <programlisting>&lt;bean id="fileContainer" class="org.db4ospring.ObjectContainerFactoryBean"&gt;
 &lt;property name="databaseFile" value="classpath:db4o-file.db"/&gt;
&lt;/bean&gt;</programlisting>

      <para>For local configurations, it is possible to pass a db4o
      <literal>Configuration</literal> object (if no configuration is given,
      as in the examples above, the JVM global configuration is being
      used):<programlisting>&lt;bean id="myContainer"&gt;
  &lt;property name="configuration" ref="customizedConfiguration"/&gt;
  ...
&lt;/bean&gt;</programlisting>See the <link
      linkend="config-configuration">db4o configuration section</link> for
      more information on defining and using a
      <literal>Configuration</literal> object.</para>
    </sect2>

    <sect2>
      <title id="object-server-configuration">Configuring an
      ObjectServer</title>

      <para>ObjectServerFactoryBean can be used for creating and configuring
      an <literal>ObjectServer</literal> :</para>

      <programlisting>&lt;bean id="server" class="org.db4ospring.ObjectServerFactoryBean"&gt;
 &lt;property name="userAccessLocation" value="user-access.properties"/&gt; 
 &lt;property name="databaseFile" value="file://./db4o.db"/&gt;
 &lt;property name="port" value="123"/&gt;
&lt;/bean&gt;</programlisting>

      <para>Note the <emphasis>userAccessLocation</emphasis> property which
      specifies the location of a <literal>Properties</literal> file that will
      be used for user acess - the properties file keys will be considered the
      user names while the values as their passwords.</para>
    </sect2>

    <sect2>
      <title id="config-configuration">Using db4o's Configuration
      object</title>

      <para>When a complex configuration is required,
      <literal>ConfigurationFactoryBean</literal> offers an extensive list of
      db4o parameters which can be used to customize db4o
      <literal>ObjectContainer</literal>s . The <literal>FactoryBean</literal>
      can work with the global JVM db4o configuration, a cloned configuration
      from the global one or a newly created (which ignored the settings on
      the global) based on the <literal>configurationCreationMode</literal>
      parameter:</para>

      <programlisting>&lt;bean id="configurationObject" class="org.db4ospring.ConfigurationFactoryBean"&gt;
 &lt;property name="messageLevel" value="2"/&gt;
 &lt;property name="activationDepth" value="3"/&gt;
 &lt;!-- possible values are NEW, CLONED and GLOBAL --&gt;
 &lt;property name="configurationCreationMode value="NEW"/&gt;
&lt;/bean&gt;</programlisting>
    </sect2>
  </sect1>

  <sect1>
    <title>Inversion of Control: Template and Callback</title>

    <para>The core classes of db4o module that are used in practice, are
    <literal>Db4oTemplate</literal> and <literal>Db4oCallback</literal> . The
    template translates db4o exceptions into Spring Data Access exception
    hierarchy (making it easy to integrate db4o with other persistence
    frameworks supported by Spring) and maps most of db4o
    <literal>ObjectContainer</literal> and
    <literal>ExtObjectContainer</literal> interface methods, allowing
    one-liners:</para>

    <programlisting>db4oTemplate.activate(personObject, 4); // or
db4oTemplate.releaseSemaphore("myLock");</programlisting>

    <para></para>
  </sect1>

  <sect1>
    <title>Transaction Management</title>

    <para>db4o module provides integration with Spring's excellent transaction
    support through <literal>Db4oTransactionManager</literal> class. Since
    db4o statements are always executed inside a transaction, Spring
    transaction demarcation can be used for commiting or rolling back the
    running transaction at certain points during the execution flow.</para>

    <para>Consider the following example (using Spring 2.0 transactional
    namespace):</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="
http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"&gt;

 &lt;!-- this is the service object that we want to make transactional --&gt; 

 &lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt;

 &lt;!-- the transactional advice (i.e. what 'happens'; see the &lt;aop:advisor/&gt; bean below) --&gt; 
 &lt;tx:advice id="txAdvice" transaction-manager="txManager"&gt; 
 &lt;!-- the transactional semantics... --&gt; 
   &lt;tx:attributes&gt;
   &lt;!-- all methods starting with 'get' are read-only --&gt;
     &lt;tx:method name="get*" read-only="true"/&gt; 
   &lt;!-- other methods use the default transaction settings (see below) --&gt; 
     &lt;tx:method name="*"/&gt;
   &lt;/tx:attributes&gt;
 &lt;/tx:advice&gt;

 &lt;!-- 
    ensure that the above transactional advice runs for any execution of an 
    operation defined by the FooService interface 
  --&gt; 
 &lt;aop:config&gt; 
  &lt;aop:pointcut id="fooServiceOperation" expression="execution(*x.y.service.FooService.*(..))"/&gt; 
  &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/&gt; 
 &lt;/aop:config&gt;

 &lt;bean id="txManager" class="org.db4ospring.Db4oTransactionManager"&gt;
  &lt;property name="objectContainer" ref="objectContainer"/&gt;
 &lt;/bean&gt;

// more bean definition follow 
&lt;/beans&gt;</programlisting>
  </sect1>

  <sect1>
    <title>Outside the Spring container</title>

    <para>It is important to note that db4o-spring classes rely as much as
    possible on db4o alone and they work with objects either configured by the
    developer or by Spring framework. The template as well as the
    <literal>FactoryBean</literal>s can be instantiated either by Spring or
    created programatically through Java code.</para>
  </sect1>
</chapter>